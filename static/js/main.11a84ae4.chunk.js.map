{"version":3,"sources":["hooks/form.js","components/form.js","hooks/timer.js","hooks/mouse.js","hooks/window.js","App.js","serviceWorker.js","index.js"],"names":["useInput","name","defaultValue","validate","regex","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","error","setError","handleValidate","valid","props","onChange","e","target","onBlur","useStyles","makeStyles","theme","root","minWidth","height","paper","padding","spacing","unit","form","marginTop","input","marginBottom","withTheme","validations","EMAIL","NUMBER","Form","classes","useTheme","handleValidation","match","email","age","data","setData","submit","inputs","success","_useState5","_useState6","errorItems","setErrorItems","onSubmit","preventDefault","filter","length","map","_ref","_ref$props","useSubmit","time","Date","toTimeString","split","setTime","tick","useEffect","timer","setInterval","clearInterval","useClock","pos","x","y","state","setState","handler","clientX","clientY","window","addEventListener","removeEventListener","usePos","scroll","top","scrollY","left","scrollX","handleScroll","useScroll","size","innerHeight","width","innerWidth","handleResize","useSize","react_default","a","createElement","core_index_es","container","alignContent","justify","alignItems","className","variant","color","palette","primary","main","assign","label","type","concat","item","index","key","createMuiTheme","typography","useNextVariants","App","index_es","components_form","Boolean","location","hostname","install","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11a84ae4.chunk.js","sourcesContent":["import { useState } from \"react\";\n\n// custom hook for textinput elements\nexport function useInput(name, defaultValue, validate, regex) {\n  // set up the state for the input item and error\n  const [value, setValue] = useState(defaultValue);\n  const [error, setError] = useState(null);\n\n  // updates the state onChange event\n  function handleChange(e) {\n    // set the state no matter what\n    setValue(e.target.value);\n    setError(null); // hide error on input\n  }\n\n  // when component loses focus run validation\n  function handleBlur() {\n    handleValidate();\n  }\n\n  // call validate if supplied and set error appropriately\n  function handleValidate() {\n    const valid = validate && validate(value, regex);\n    setError(!valid);\n    return valid;\n  }\n\n  // other handlers like focus, blur etc could be handled\n  // conditional stuff to transform value to props could also be added\n\n  return {\n    props: {\n      name,\n      value,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      error\n    },\n    validate: handleValidate\n  };\n}\n\n// custom hook for form input\nexport function useSubmit(inputs, success) {\n  // set up the state for the error component\n  const [errorItems, setErrorItems] = useState(null);\n\n  // handle submit\n  function handleSubmit(e) {\n    e.preventDefault(); //prevent page refresh\n\n    //blur everything to validate again\n    const errorItems = inputs.filter(input => !input.validate());\n    setErrorItems(errorItems);\n    if (errorItems && errorItems.length === 0) {\n      success &&\n        success(\n          inputs.map(({ props: { name, value } }) => ({\n            name,\n            value\n          }))\n        );\n    }\n  }\n\n  return {\n    props: {\n      onSubmit: handleSubmit\n    },\n    errorItems\n  };\n}\n","import React, { useState } from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/styles\";\nimport {\n  Grid,\n  Paper,\n  Button,\n  Typography,\n  Table,\n  TableRow,\n  TableCell,\n  TextField,\n  TableBody,\n  TableHead\n} from \"@material-ui/core\";\nimport { useInput, useSubmit } from \"../hooks/form\";\nimport { useClock } from \"../hooks/timer\";\nimport { usePos } from \"../hooks/mouse\";\nimport { useScroll, useSize } from \"../hooks/window\";\n\n//create a hook for classes objects\nconst useStyles = makeStyles(\n  theme => ({\n    root: {\n      minWidth: \"500px\",\n      height: \"100vh\"\n    },\n    paper: {\n      padding: theme.spacing.unit * 3\n    },\n    form: {\n      marginTop: theme.spacing.unit * 3\n    },\n    input: {\n      marginBottom: theme.spacing.unit * 3\n    }\n  }),\n  { withTheme: true }\n);\n\nconst validations = {\n  // eslint-disable-next-line\n  EMAIL: /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  NUMBER: /^\\d*$/\n};\n\nfunction Form() {\n  // use of hooks to bring classes style sheet in (usually done with HOC)\n  const classes = useStyles();\n  // we can alse use a hook to access the theme\n  const theme = useTheme();\n\n  function handleValidation(value, regex) {\n    // we could get fancy here with validations based on type of input\n    // could be put in a form hook library and imported\n    if (value && regex && value.match(regex)) return true;\n    return false;\n  }\n\n  const email = useInput(\"Email\", \"\", handleValidation, validations.EMAIL);\n  const age = useInput(\"Number\", \"\", handleValidation, validations.NUMBER);\n\n  // the data we're going to submit, just using a hook to display\n  const [data, setData] = useState(null);\n\n  function handleSuccess(data) {\n    // we're just setting the state here, but typically this would\n    // be sent to the server for further validation and persistence\n    setData(data);\n  }\n\n  //pass in array of hooks to validate onSubmit (that's where the data is)\n  const submit = useSubmit([email, age], handleSuccess);\n\n  // custom hook using both useState and useEffect\n  const time = useClock();\n\n  // custom hook using both useState and useEffect\n  const pos = usePos();\n\n  // custom hook using both useState and useEffect\n  const scroll = useScroll();\n\n  // custom hook using both useState and useEffect\n  const size = useSize();\n\n  return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      justify=\"center\"\n      alignItems=\"center\"\n      className={classes.root}\n    >\n      <Paper className={classes.paper}>\n        <Typography variant=\"h4\">NearForm Hooks Demo</Typography>\n        <Typography color=\"primary\">\n          Theme Hook (primary color): {theme.palette.primary.main}\n        </Typography>\n        <Typography>Time Hook: {time}</Typography>\n        <Typography>\n          Mouse Position Hook: {pos.x}, {pos.y}\n        </Typography>\n        <Typography>\n          Window Size Hook: {size.width}, {size.height}\n        </Typography>\n        <Typography>\n          Window Scroll Hook: {scroll.top}, {scroll.left}\n        </Typography>\n        <Typography variant=\"h5\">Input and Form Submit Hooks</Typography>\n        <form className={classes.form} {...submit.props}>\n          <div className={classes.input}>\n            <TextField label=\"Email\" variant=\"outlined\" {...email.props} />\n            {email.props.error && (\n              <Typography variant=\"body1\" color=\"error\">\n                Invalid Email address\n              </Typography>\n            )}\n          </div>\n          <div className={classes.input}>\n            <TextField label=\"Age\" variant=\"outlined\" {...age.props} />\n            {age.props.error && (\n              <Typography variant=\"body1\" color=\"error\">\n                Invalid age\n              </Typography>\n            )}\n          </div>\n          <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n            Submit\n          </Button>\n          {submit.errorItems && submit.errorItems.length > 0 && (\n            <Typography variant=\"body1\" color=\"error\">\n              {`Please fix ${submit.errorItems && submit.errorItems.length} form\n            field error(s)`}\n            </Typography>\n          )}\n        </form>\n        {data && (\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Input Field</TableCell>\n                <TableCell>Validated Input</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map((item, index) => (\n                <TableRow key={`form-${index}`}>\n                  <TableCell>{item.name}</TableCell>\n                  <TableCell>{item.value}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </Paper>\n    </Grid>\n  );\n}\n\nexport default Form;\n","import { useState, useEffect } from \"react\";\n\nexport function useClock() {\n  // set up our time state variable, mutator and initialize\n  const [time, setTime] = useState(new Date().toTimeString().split(\" \")[0]);\n\n  // timer callback handler\n  function tick() {\n    setTime(new Date().toTimeString().split(\" \")[0]);\n  }\n\n  useEffect(\n    // same as componentDidMount and componentDidUpdate\n    () => {\n      // set up timer to callback to tick, setting to 50ms to call\n      // multiple times between renders\n      const timer = setInterval(tick, 50);\n      return () => clearInterval(timer); // same as componentWillUnmount\n    },\n    [time] // only re-render if time changed (prevent unnecessary re-renders)\n  );\n\n  return time;\n}\n","import { useState, useEffect } from \"react\";\n\nexport function usePos() {\n  const [state, setState] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const handler = ({ clientX, clientY }) =>\n      setState({ x: clientX, y: clientY });\n    window.addEventListener(\"mousemove\", handler);\n    return () => window.removeEventListener(\"mousemove\", handler);\n  }, []);\n\n  return state;\n}\n","import { useState, useEffect } from \"react\";\n\nexport function useSize() {\n  const [state, setState] = useState({\n    height: window.innerHeight,\n    width: window.innerWidth\n  });\n\n  function handleResize(e) {\n    setState({ height: e.target.innerHeight, width: e.target.innerWidth });\n  }\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n\n  return state;\n}\n\nexport function useScroll() {\n  const [state, setState] = useState({\n    top: window.scrollY,\n    left: window.scrollX\n  });\n\n  function handleScroll() {\n    setState({ top: window.scrollY, left: window.scrollX });\n  }\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return function cleanup() {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  });\n\n  return state;\n}\n","import React from \"react\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Form from \"./components/form\";\n\n// create our material ui theme using up to date typography variables\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  }\n});\n\n// Let's convert App from class to function to get into the mood!\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Form />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { install } from \"@material-ui/styles\";\n\ninstall();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}